var fs = require('fs'),
	uglify = require('uglify-js'),

	packageJson = require('./package.json'),
	bowerJson = require('./bower.json')


function buildMinifiedJs(string) {

	var ast,
		compressor = uglify.Compressor()

	ast = uglify.parse(string)

	ast.figure_out_scope()
	ast.transform(compressor)
	ast.figure_out_scope()
	ast.compute_char_frequency()
	ast.mangle_names()

	return ast.print_to_string({"comments": /Shaven/})
}


desc('Default build process')
task('default', ['shaven.js', 'shaven.min.js', 'index.html', 'bower.json'], function () {
})


desc('Compile shaven.js')
file('shaven.js', ['src/shaven.js', 'package.json'], {async: true}, function () {

	var jsString = fs.readFileSync('src/shaven.js').toString(),
		file = fs.openSync('shaven.js', 'w+')

	jsString = jsString.replace('{{ VERSION }}', packageJson.version)

	fs.write(file, jsString, undefined, undefined, function () {
		console.log('Building shaven.js succeeded')
	})

	complete()
})


desc('Compile shaven.min.js')
file('shaven.min.js', ['src/shaven.js', 'package.json'], {async: true}, function () {

	var jsString = fs.readFileSync('src/shaven.js').toString(),
		file = fs.openSync('shaven.min.js', 'w+')

	jsString = buildMinifiedJs(jsString.replace('{{ VERSION }}', packageJson.version))

	fs.write(file, jsString, undefined, undefined, function () {
		console.log('Building shaven.min.js succeeded')
	})

	complete()
})


desc('Compile index.html')
file('index.html', ['package.json'], {async: true}, function () {

	var fileName = this.name,
		data

	data = fs.readFileSync(fileName, {encoding: 'utf8'})

	data = data.replace(/Version [\.0-9]+/g, 'Version ' + packageJson.version)

	fs.writeFileSync(fileName, data)

	console.log('Building ' + fileName + ' succeeded')

	complete()
})

desc('Sync package.json to bower.json')
file('bower.json', ['package.json'], {async: true}, function () {

	var syncAttributes = [
		'name',
		'version',
		'description',
		'homepage',
		'keywords',
		'author'
	]

	syncAttributes.forEach(function(attribute){
		bowerJson[attribute] = packageJson[attribute]
	})

	//console.log(JSON.stringify(bowerJson))

	fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2))
	fs.writeFileSync(this.name, JSON.stringify(bowerJson, null, 2))

	console.log('Building ' + this.name + ' succeeded')

	complete()
})

desc('Remove compiled files')
task('clean', [], {async: true}, function () {

	var files = [
		'shaven.js',
		'shaven.min.js'
	]

	files.forEach(function (file) {
		fs.exists(file, function (exists) {

			if (exists)
				fs.unlink(file, function (err) {
					if (err) console.log(err)
				})
		})
	})

	complete()
})
