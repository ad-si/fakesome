var fs = require('fs'),
	uglify = require('uglify-js'),
	browserify = require('browserify'),
	stylus = require('stylus'),
	nib = require('nib'),
	htmlMinifier = require('html-minifier'),

	packageJson = require('./package.json'),
	documentation = require('./src/documentation'),
	htmlGenerator = require('./src/htmlGenerator'),
	version = packageJson.version,
	buildFiles = [
		'fakesome.js',
		'fakesome.min.js',
		'index.html'
	]


function buildMinifiedJs (string) {

	var compressor = uglify.Compressor(),
		ast

	ast = uglify.parse(string)
	ast.figure_out_scope()
	ast.transform(compressor)
	ast.figure_out_scope()
	ast.compute_char_frequency()
	ast.mangle_names()

	return ast.print_to_string({"comments": /fakesome/})
}

function bundleModules (callback) {

	var jsString = '// fakesome ' + version + ' by Adrian Sieber (adriansieber.com)\n\n',
		b = browserify()
			.add('./src/fakesome.js')
			.ignore('canvas')
			.bundle()

	b.on('data', function (chunk) {
		jsString += chunk
	})

	b.on('end', function () {
		callback(jsString)
	})
}


desc('Default build process')
task('default', buildFiles)


watchTask(['default'], function () {
	this.watchFiles.include([
		'./**/*.styl'
	])
})


desc('Compile fakesome.js')
file(
	'fakesome.js',
	[
		'src/fakesome.js',
		'package.json'
	],
	{async: true},
	function () {

		var fileName = this.name,
			file = fs.openSync(fileName, 'w+')

		bundleModules(function (jsString) {

			fs.writeSync(file, jsString)

			console.log('Building ' + fileName + ' succeeded')
			complete()
		})
	})


desc('Compile fakesome.min.js')
file(
	'fakesome.min.js',
	[
		'src/fakesome.js',
		'package.json'
	],
	{async: true},
	function () {

		var fileName = this.name,
			file = fs.openSync(fileName, 'w+')


		bundleModules(function (jsString) {

			fs.writeSync(file, buildMinifiedJs(jsString))

			console.log('Building ' + fileName + ' succeeded')
			complete()
		})

	})


desc('Compile index.html')
file(
	'index.html',
	[
		'src/index.hbs',
		'src/htmlGenerator.js',
		'src/documentation.js',
		'src/fakesome.js',
		'package.json'
	],
	{async: true},
	function () {

		var fileName = this.name,
			html = htmlGenerator(),
			data = fs.readFileSync('src/index.hbs', {encoding: 'utf8'})
				.replace('{{documentation}}', html.documentation)
				.replace('{{tableOfContents}}', html.tableOfContents)
				.replace(/Version [\.0-9]+/g, 'Version ' + version),
			lint = new htmlMinifier.HTMLLint()


		fs.writeFileSync(
			fileName,
			htmlMinifier.minify(data, {
				removeComments: true,
				collapseWhitespace: true,
				removeAttributeQuotes: true,
				removeRedundantAttributes: true,
				minifyJS: true,
				lint: lint
			})
		)

		lint.populate()

		console.log('Building ' + fileName + ' succeeded')
		complete()
	}
)


desc('Remove compiled files')
task('clean', [], function () {

	buildFiles.forEach(function (file) {

		fs.unlink(file, function (err) {
			if (err) throw err
			console.log('Deleted ' + file)
		})
	})
})
