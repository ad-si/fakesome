var fs = require('fs'),
	uglify = require('uglify-js'),
	browserify = require('browserify'),
	version = require('./package.json').version


function buildMinifiedJs(string) {

	var ast,
		compressor = uglify.Compressor()

	ast = uglify.parse(string)
	ast.figure_out_scope()
	ast.transform(compressor)
	ast.figure_out_scope()
	ast.compute_char_frequency()
	ast.mangle_names()

	return ast.print_to_string({"comments": /fakesome/ })
}

function bundleModules(callback) {

	var jsString = '// fakesome ' + version +' by Adrian Sieber (adriansieber.com)\n\n',
		b = browserify()
			.add('./src/fakesome.js')
			.bundle()

	b.on('data', function (chunk) {
		jsString += chunk
	})

	b.on('end', function () {
		callback(jsString)
	})
}


desc('Default build process')
task('default', ['fakesome.min.js', 'fakesome.js'], function () {
})


desc('Compile fakesome.min.js')
task('fakesome.min.js', [], function () {

	var fileName = this.name,
		file = fs.openSync(fileName, 'w+')


	bundleModules(function (jsString) {

		fs.writeSync(file, buildMinifiedJs(jsString))

		console.log('Building ' + fileName + ' succeeded')
	})

})


desc('Compile fakesome.js')
task('fakesome.js', [], function () {

	var fileName = this.name,
		file = fs.openSync(fileName, 'w+')


	bundleModules(function (jsString) {

		fs.writeSync(file, jsString)

		console.log('Building ' + fileName + ' succeeded')
	})
})


desc('Remove compiled files')
task('clean', [], function () {

	fs.unlink('fakesome.min.js', function (err) {
		if (err) throw err
	})
})