var fs = require('fs'),
	uglify = require('uglify-js'),
	browserify = require('browserify'),
	stylus = require('stylus'),
	nib = require('nib'),

	packageJson = require('./package.json'),
	version = packageJson.version,
	buildFiles = [
		'fakesome.js',
		'fakesome.min.js',
		'css/screen.css',
		'index.html'
	]


function buildMinifiedJs(string) {

	var compressor = uglify.Compressor(),
		ast

	ast = uglify.parse(string)
	ast.figure_out_scope()
	ast.transform(compressor)
	ast.figure_out_scope()
	ast.compute_char_frequency()
	ast.mangle_names()

	return ast.print_to_string({"comments": /fakesome/ })
}

function bundleModules(callback) {

	var jsString = '// fakesome ' + version + ' by Adrian Sieber (adriansieber.com)\n\n',
		b = browserify()
			.add('./src/fakesome.js')
			.ignore('canvas')
			.bundle()

	b.on('data', function (chunk) {
		jsString += chunk
	})

	b.on('end', function () {
		callback(jsString)
	})
}


desc('Default build process')
task('default', buildFiles)


watchTask(['default'], function () {
	this.watchFiles.include([
		'./**/*.styl'
	])
})


desc('Compile fakesome.js')
file('fakesome.js', ['src/fakesome.js', 'package.json'], {async: true}, function () {

	var fileName = this.name,
		file = fs.openSync(fileName, 'w+')

	bundleModules(function (jsString) {

		fs.writeSync(file, jsString)

		console.log('Building ' + fileName + ' succeeded')
		complete()
	})
})


desc('Compile fakesome.min.js')
file('fakesome.min.js', ['src/fakesome.js', 'package.json'], {async: true}, function () {

	var fileName = this.name,
		file = fs.openSync(fileName, 'w+')


	bundleModules(function (jsString) {

		fs.writeSync(file, buildMinifiedJs(jsString))

		console.log('Building ' + fileName + ' succeeded')
		complete()
	})

})


desc('Build minified CSS file for production.')
file('css/screen.css', ['styl/screen.styl'], {async: true}, function () {

	var all = '',
		files = ['styl/screen.styl'],
		fileName = this.name

	files.forEach(function (file) {
		all += fs.readFileSync(file, 'utf8').toString()
		all += '\n'
	})

	stylus(all)
		.set('filename', 'css/' + fileName)
		.set('compress', true)
		.use(nib())
		.import('nib')
		.render(function (err, css) {

			if (err) throw err

			fs.writeFileSync(fileName, css)

			console.log('Building ' + fileName + ' succeeded')
			complete()
		})
})


desc('Compile index.html')
file('index.html', ['package.json'], {async: true}, function () {

	var fileName = this.name,
		data

	data = fs.readFileSync(fileName, {encoding: 'utf8'})

	data = data.replace(/Version [\.0-9]+/g, 'Version ' + version)

	fs.writeFileSync(fileName, data)

	console.log('Building ' + fileName + ' succeeded')
	complete()
})


desc('Remove compiled files')
task('clean', [], function () {

	buildFiles.forEach(function (file) {

		fs.unlink(file, function (err) {
			if (err) throw err
			console.log('Deleted ' + file)
		})
	})
})
